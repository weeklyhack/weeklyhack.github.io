<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>weeklyHack</title>
    <description>I&#39;ll make one hack per week and write about it.
</description>
    <link>weeklyhack.github.io/</link>
    <atom:link href="weeklyhack.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 21 May 2016 20:06:50 -0400</pubDate>
    <lastBuildDate>Sat, 21 May 2016 20:06:50 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>ApiPush</title>
        <description>&lt;p&gt;ApiPush is a simple app that lets anyone easily publish an API without writing any
code - think Heroku for public apis. Each api is represented by a json file,
which makes publishing is a snap: &lt;code&gt;apipush path/to/config.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ApiPush supports all the stuff you probably need to wrap existing services in an
api, including both HTTP and Websockets support, dynamic queries thanks to
handlebars templates and helpers, and more.&lt;/p&gt;

&lt;p&gt;Here’s a short example. When we query the below api, it will return the title of
&lt;code&gt;http://google.com&lt;/code&gt; which happens to always be “Google”. (Hey, it’s repeatable.)
I’ve added some comments to explain what’s going on in the JSON below.
If you’re interested you can
&lt;a href=&quot;http://apipush.apps.rgaus.net/google_title/api/v1&quot; target=&quot;_blank&quot;&gt;give it a try yourself here.&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The title of Google is....&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;versions&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Specify multiple major versions&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;v1&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;routes&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A list of all routes contained in this version&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. When we perform a GET /...&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;proxy&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2. Send a request to http://google.com...&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;via&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://google.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;responses&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3. Then, return the formatted title.&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;contains&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Google&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;then&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;success\&quot;: true, \&quot;title\&quot;: \&quot;{{jquery_text &#39;title&#39;}}\&quot;}&quot;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;fail&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4. If the request fails...&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;contains&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;then&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;success\&quot;: false, \&quot;title\&quot;: null}&quot;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-did-you-make-it&quot;&gt;How did you make it?&lt;/h2&gt;
&lt;p&gt;ApiPush is written in Node.js and Express, using MongoDB as a database. Check
out ApiPush on Github &lt;a href=&quot;https://github.com/weeklyhack/0-apipush&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, since I only wrote it in (about) a week, I only have 85% test coverage.
I’m planning on, with future projects, getting that number higher though.&lt;/p&gt;

&lt;h2 id=&quot;how-can-i-give-it-a-try&quot;&gt;How can I give it a try?&lt;/h2&gt;
&lt;p&gt;First, install the cli tool:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install --global apipush&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, create and push up an api:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apipush init api.json
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# (make any edits)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apipush api.json
Welcome!
Please login or create an account by entering an email and a password:
Email Address: user@example.com
Password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;user@example.com: &lt;span class=&quot;k&quot;&gt;********&lt;/span&gt;
... Loaded api docs from api.json
... Published by user@example.com

... Api sleepy-train-army been provisioned!
... Check out your new api at http://apipush.apps.rgaus.net/sleepy-train-army/api/v1
... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;and, get metadata information at http://apipush.apps.rgaus.net/sleepy-train-army/api/v1/_meta.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Try appending &lt;code&gt;?name=bob&lt;/code&gt; to the end of the api above to see dynamic queries in action.&lt;/p&gt;

&lt;p&gt;If you’d like to know more about all the possible options, I’ve &lt;a href=&quot;https://github.com/weeklyhack/0-apipush&quot;&gt;a lot more documentation in
the README.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 21 May 2016 09:26:16 -0400</pubDate>
        <link>weeklyhack.github.io/ApiPush/</link>
        <guid isPermaLink="true">weeklyhack.github.io/ApiPush/</guid>
        
        
        <category>project</category>
        
        <category>apipush</category>
        
      </item>
    
  </channel>
</rss>
