<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>weeklyHack</title>
    <description>I&#39;ll make one hack per week and write about it.
</description>
    <link>weeklyhack.github.io/</link>
    <atom:link href="weeklyhack.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 May 2016 14:15:35 -0400</pubDate>
    <lastBuildDate>Fri, 27 May 2016 14:15:35 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>PH, a tool for making git push more efficient</title>
        <description>&lt;p&gt;For my second project, I wanted to get closer to my original goal - to learn a
new language every week. Therefore, this week, I took a look at a language I’ve
heard a lot of good and bad about: Go.&lt;/p&gt;

&lt;p&gt;Go at first looked like javascript and python had a baby with C. The fact that Go
is a compiled language–a rarity these days–intrigued me. I had never really
used one extensively before for a project and this felt like the perfect excuse
to try.&lt;/p&gt;

&lt;p&gt;After a week, I can say that Go has its quirks. &lt;a href=&quot;&quot;&gt;In fact, I wrote a whole blog
post about them.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;so-what-did-i-write&quot;&gt;So, what did I write?&lt;/h3&gt;

&lt;p&gt;Every day, I push code with git at least 50 times. Usually, I run something
like &lt;code&gt;git push origin master&lt;/code&gt;, a full 22 characters. There had to be a more
efficient way to push code. Am I lazy? Maybe. But, efficiency matters.
I tried some fancy shell aliases, and while they
were ok they never really worked quite right for my needs. I figured this
would be a perfect opportunity to write a solution.&lt;/p&gt;

&lt;p&gt;Enter PH.&lt;/p&gt;

&lt;p&gt;PH is an app that makes git push easier. Remember &lt;code&gt;git push origin master&lt;/code&gt;?
Instead, do &lt;code&gt;ph om&lt;/code&gt;. A full 18 characters shorter. Need to do something a little
more complex, like &lt;code&gt;git pull origin branch -v&lt;/code&gt;? Simple, just do &lt;code&gt;ph
lobv&lt;/code&gt;. Enough with my convoluted examples, here’s it in action:&lt;/p&gt;

&lt;div style=&quot;overflow: hidden; width: 100%;&quot;&gt;
  &lt;img alt=&quot;PH in action&quot; src=&quot;/assets/images/posts/ph.gif&quot; style=&quot;min-width: 500px;&quot; /&gt;
&lt;/div&gt;

&lt;!--
### Still unconvinced?

PH can also analyze the git pushes that you make to tell you how to make them
better. Just run `ph inject`. PH will add a shell snippet to your shell&#39;s
profile to analyze your git pushes and pulls. Then, after a while, run `ph
report`. PH will tell you how you could have optimized all of your shell
commands to minimize typing. --&gt;

&lt;h2 id=&quot;how-can-you-use-it&quot;&gt;How can you use it?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/weeklyhack/1-ph/blob/master/README.md&quot;&gt;Installation instructions are in the README.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-did-i-do&quot;&gt;How did I do?&lt;/h3&gt;
&lt;p&gt;I was able to gain nearly 80% test coverage, but the only thing keeping me from
100% was that I couldn’t find a mocking library for Go that worked for me and
was intuitive.&lt;/p&gt;

&lt;p&gt;Go gets a lot of things right. Pointers are done sensibly. Types are easy to understand when reading the code and have helped reduce errors as I work. Therefore, will I be using Go everyday from now on? Yes and no. Once Go has an official package manager and has matured as a platform, then I can see myself really getting into it.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 May 2016 12:37:16 -0400</pubDate>
        <link>weeklyhack.github.io/PH/</link>
        <guid isPermaLink="true">weeklyhack.github.io/PH/</guid>
        
        
        <category>project</category>
        
        <category>ph</category>
        
      </item>
    
      <item>
        <title>ApiPush, a service that lets you write public api&#39;s without code</title>
        <description>&lt;p&gt;ApiPush is a simple app that lets anyone easily publish an API without writing any
code - think Heroku for public apis. Each api is represented by a json file,
which makes publishing is a snap: &lt;code&gt;apipush path/to/config.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ApiPush supports all the stuff you probably need to wrap existing services in an
api, including both HTTP and Websockets support, dynamic queries thanks to
handlebars templates and helpers, and more.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/9g2gseg3in3wbua2v4th4aw4j.js&quot; id=&quot;asciicast-9g2gseg3in3wbua2v4th4aw4j&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;heres-a-short-example&quot;&gt;Here’s a short example.&lt;/h3&gt;
&lt;p&gt;When we query the below api, it will return the title of
&lt;code&gt;http://google.com&lt;/code&gt; which happens to always be “Google”. (Hey, it’s repeatable.)
I’ve added some comments to explain what’s going on in the JSON below.
If you’re interested you can
&lt;a href=&quot;http://apipush.apps.rgaus.net/google_title/api/v1&quot; target=&quot;_blank&quot;&gt;give it a try yourself here.&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The title of Google is....&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;versions&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Specify multiple major versions&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;v1&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;routes&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// A list of all routes contained in this version&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. When we perform a GET /...&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;proxy&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2. Send a request to http://google.com...&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;via&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://google.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;responses&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3. Then, return the formatted title.&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;contains&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Google&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;then&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;success\&quot;: true, \&quot;title\&quot;: \&quot;{{jquery_text &#39;title&#39;}}\&quot;}&quot;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;fail&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4. If the request fails...&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;contains&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;then&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{\&quot;success\&quot;: false, \&quot;title\&quot;: null}&quot;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-did-you-make-it&quot;&gt;How did you make it?&lt;/h2&gt;
&lt;p&gt;ApiPush is written in Node.js and Express, using MongoDB as a database. Check
out ApiPush on Github &lt;a href=&quot;https://github.com/weeklyhack/0-apipush&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, since I only wrote it in (about) a week, I only have 85% test coverage.
I’m planning on, with future projects, getting that number higher though.&lt;/p&gt;

&lt;h2 id=&quot;how-can-i-give-it-a-try&quot;&gt;How can I give it a try?&lt;/h2&gt;
&lt;p&gt;First, install the cli tool:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install --global apipush&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, create and push up an api:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apipush init api.json
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# (make any edits)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;apipush api.json
Welcome!
Please login or create an account by entering an email and a password:
Email Address: user@example.com
Password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;user@example.com: &lt;span class=&quot;k&quot;&gt;********&lt;/span&gt;
... Loaded api docs from api.json
... Published by user@example.com

... Api sleepy-train-army been provisioned!
... Check out your new api at http://apipush.apps.rgaus.net/sleepy-train-army/api/v1
... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;and, get metadata information at http://apipush.apps.rgaus.net/sleepy-train-army/api/v1/_meta.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Try appending &lt;code&gt;?name=bob&lt;/code&gt; to the end of the api above to see dynamic queries in action.&lt;/p&gt;

&lt;p&gt;If you’d like to know more about all the possible options, I’ve &lt;a href=&quot;https://github.com/weeklyhack/0-apipush&quot;&gt;a lot more documentation in
the README.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 21 May 2016 09:26:16 -0400</pubDate>
        <link>weeklyhack.github.io/ApiPush/</link>
        <guid isPermaLink="true">weeklyhack.github.io/ApiPush/</guid>
        
        
        <category>project</category>
        
        <category>apipush</category>
        
        <category>node</category>
        
      </item>
    
  </channel>
</rss>
